@using Kendo.Mvc.UI
@{
    Layout = "~/Views/Shared/_FormList.cshtml";
    int gridPageSize = ViewBag.Pagesize;
}

@*Menu main*@
@Html.Action("AToolbar", "Nav")

@*Grid main*@
<div>
    @(Html.Kendo().Grid<WebCaffe.Models.SUserModel>()
              .Name("grid")
              .Columns(columns =>
              {
                  columns.Bound(p => p.Username).Width(200).Sortable(true).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")));
                  columns.Bound(p => p.FullName).Width(200).Sortable(true).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")));
                  columns.Bound(p => p.Email).Width(200).Sortable(true).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")));
                  columns.Bound(p => p.Mobile).Width(200).Sortable(true).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")));
                  //columns.Bound(p => p.Skype).Width(200).Sortable(true).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")));
                  //columns.Bound(p => p.Position).Width(200).Sortable(true).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")));
                  //columns.Bound(p => p.RecordsInPage).Width(200).Sortable(true).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")));
                  //columns.Bound(p => p.Active).Width(90).Filterable(false).ClientTemplate("# if (Active == true) { #" + "<span class=\"k-icon k-i-tick\"></span>" + "# } #").HtmlAttributes(new { @class = "grid-center" });
                  //columns.Bound(p => p.Note).Width(160).Sortable(true).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")));
                  //columns.Bound(p => p.StartDate).Width(160).Format("{0:dd/MM/yyyy h:mm:ss tt}").Sortable(true).Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(false)));
                  //columns.Bound(p => p.EndDate).Width(160).Format("{0:dd/MM/yyyy h:mm:ss tt}").Sortable(true).Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(false)));
                  columns.Bound(p => p.UpdatedAt).Width(160).Format("{0:dd/MM/yyyy h:mm:ss tt}").Sortable(true).Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(false)));
                  //columns.Bound(p => p.UpdatedBy).Width(130).Filterable(true).Sortable(false).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")));
                  columns.Bound(p => p.CreatedAt).Width(160).Format("{0:dd/MM/yyyy h:mm:ss tt}").Sortable(true).Filterable(ftb => ftb.Cell(cell => cell.ShowOperators(false)));
                  //columns.Bound(p => p.CreatedBy).Width(160).Filterable(true).Sortable(false).Filterable(ftb => ftb.Cell(cell => cell.Operator("contains")));

              })
               .ToolBar(toolbar =>
               {
               toolbar.Template(@<text>
                </text>);
                    })
                            .Pageable(pageable => pageable.PageSizes(new[] { 5, 10, 20, 50, 100, 200, 500, 1000 }).ButtonCount(gridPageSize)
                            .Messages(messages => messages.ItemsPerPage("Số bản ghi")))
                            .Sortable()
                            .Scrollable()
                            .Selectable()
                            .Filterable(ftb => ftb.Mode(GridFilterMode.Row))
                            .Navigatable()
                            .Resizable(resize => resize.Columns(true))
                            .DataSource(dataSource => dataSource
                            .Ajax()
                            .ServerOperation(false)
                                .Model(model => model.Id(p => p.Guid))
                                .Read(read => read.Action("Read", "SUser"))
                                .PageSize(gridPageSize)
                                .Batch(false)
                            .AutoSync(false)
                            )
                            .Events(e => e.DataBound("grid_DataBound"))
    )
</div>

@*Bound*@
<script>
    var __IdCode = 0;
    function grid_DataBound() {
        var idCode = __IdCode;
        var grid = $("#grid").data("kendoGrid");
        var data = grid.dataSource.data();
        var totalNumber = data.length;
        var pageSize = grid.dataSource._pageSize;
        var index = 0;
        var row;
        for (var i = 0; i < totalNumber; i++) {
            row = data[i];
            if (row.Guid == idCode) {
                index = i + 1;
                var model = grid.dataSource.get(idCode);
                var row1 = $("#grid").find("tbody>tr[data-uid=" + model.uid + "]");
                grid.select(row1);
                break;
            }
        }
        if (totalNumber > pageSize) {
            var cpage = this.dataSource.page();
            var page = Math.floor(index / pageSize);
            if ((index % pageSize) != 0) {
                page = page + 1;
            }

            if (cpage != page && page != 0) {
                grid.dataSource.page(page);
            }
        }
        if (idCode == "") {
            var tpage = Math.floor(totalNumber / pageSize);
            if ((totalNumber % pageSize) != 0) {
                tpage = Math.floor(totalNumber / pageSize) + 1;
            }
            if (tpage < cpage && tpage != 0) {
                grid.dataSource.page(tpage);
            }
            row = grid.tbody.find(">tr:not(.k-grouping-row)").eq(0);
            grid.select(row);
        }

        __IdCode = 0;
        if (index != 0) {
            var scrollContentOffset = this.element.find("tbody").offset().top;
            var selectContentOffset = this.select().offset().top;
            var distance = selectContentOffset - scrollContentOffset;

            this.element.find(".k-grid-content").animate({
                scrollTop: distance
            }, 400);
        }
    }

    function ActiveRow(idCode) {
        __IdCode = idCode;
    }

    function voidRefresh() {
        LoadDataFind();
    }

    function LoadDataFind() {
        $("#grid").data("kendoGrid").dataSource.read({});
    }

</script>



@*div Main*@
<div>
    @(Html.Kendo().Window()
             .Name("WidgetConfigWindow")
             .Title("User")
             .Iframe(true)
             .Events(ev => ev.Open(@"function(f){
    if(window.loaded){
        this.refresh();
    }
    window.loaded = true;
}"))
            .Animation(true)
            .Resizable()
            .Draggable()
             .Width(850).Height(400)
            .Actions(actions => actions.Pin().Minimize().Maximize().Close())
            .HtmlAttributes(new { style = "marign:0;padding:0;overflow:hidden" })
            .Visible(false)
            .Modal(true)
    )
</div>

@*CED Main*@
<script>
    $(document).ready(function () {
        //Set Grid height
        GridHeight("grid");
        
    });
    Toolbar_Click();
    function getDataItem() {
        var grid = $("#grid").data("kendoGrid");
        if (grid.select().length > 0) {
            var dataItem = grid.dataItem(grid.select());
            if (dataItem) {
                return dataItem;
            }
        }
        return null;
    }

    function Create() {
        var windowWidget = $("#WidgetConfigWindow").data("kendoWindow").title("User");
        windowWidget.refresh({
            url: "@Url.Action("Create", "SUser")"
        });
        windowWidget.center();
        windowWidget.open();
    }
    function Edit() {
        if (getDataItem()) {
            var windowWidget = $("#WidgetConfigWindow").data("kendoWindow").title("User");
            windowWidget.refresh({
                url: '@Url.Action("Edit", "SUser")?guid=' + getDataItem().Guid + ''
            });
            windowWidget.center();
            windowWidget.open();
        } else {
            Notification("Chưa có bản ghi nào được chọn !", '', "Chưa có bản ghi nào được chọn !", "info");
        }
    }
    function Delete() {
        if (getDataItem()) {
            var conf = confirm("Bạn có muốn Xóa bản ghi này không?");
            if (conf) {
                $.get('@Url.Action("Delete", "SUser")', { guid: getDataItem().Guid }, function (dataResponse) {
                    if (dataResponse.StatusCode == 200) {
                        voidRefresh(); ActiveRow(0);
                    } else {
                        Notification("Không thành công !", dataResponse.StatusCode, dataResponse.MessagError, "error");
                    }
                }).fail(function (xhr, status, error) {
                    Notification("Không thành công !", "404", error, "error");
                });
            }
        } else {
            Notification("Chưa có bản ghi nào được chọn !", '', "Chưa có bản ghi nào được chọn !", "info");
        }

    }
    function Copy() {
        if (getDataItem()) {
            var conf = confirm('@Html.Raw("Bạn có muốn Copy bản ghi này không?")');
            if (conf == true) {
               $.get('@Url.Action("Copy", "SUser")', { guid: getDataItem().Guid }, function (dataResponse) {
                    switch (parseInt(dataResponse.StatusCode)) {
                        case 200:
                            {
                                voidRefresh(); ActiveRow(dataResponse.ActiveCode);break;
                            }
                        default:
                            {Notification("Không thành công !", dataResponse.StatusCode, dataResponse.MessagError, "error");
                                break;
                            }
                    }
                }).fail(function (xhr, status, error) {
                    Notification("Không thành công !", "404", error, "error");
                });
            }
        } else {
            Notification("Chưa có bản ghi nào được chọn !", '', "Chưa có bản ghi nào được chọn !", "info");
        }
    }

</script>
